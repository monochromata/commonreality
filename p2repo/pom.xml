<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.commonreality</groupId>
		<artifactId>parent</artifactId>
		<version>${newVersion}</version>
		<relativePath>../parent/pom.xml</relativePath>
	</parent>
	<groupId>org.commonreality</groupId>
	<artifactId>p2repo</artifactId>
	<version>${newVersion}</version>
	<description>Creates a P2 repository (a.k.a. update site) that provides the Maven artifacts in
	the group org.commonreality and their dependencies as Eclipse plugins.</description>
	<packaging>pom</packaging>

	<properties>
		<maven.deploy.skip>true</maven.deploy.skip>
		<maven.site.deploy.skip>true</maven.site.deploy.skip>
		<apache_license_20_file>${basedir}/Apache_License_2.0.txt</apache_license_20_file>
	</properties>

	<licenses>
		<license>
			<name>GNU Lesser General Public License</name>
			<url>http://www.gnu.org/licenses/lgpl-3.0.en.html</url>
			<comments>Note that this license applies to the Maven files that create the p2 repository and
			to the Maven artifacts in the org.commonreality group, but not necessarily to the dependencies
			also provided by p2 repository!</comments>
		</license>
	</licenses>

	<pluginRepositories>
		<pluginRepository>
			<id>reficio</id>
			<url>http://repo.reficio.org/maven/</url>
		</pluginRepository>
	</pluginRepositories>

	<!-- Dependencies are only listed to have p2repo built after all projects 
		included in it. -->
	<dependencies>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>mina</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>modalities</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>modalities.spatial</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>net</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>netty</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>sensors</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>sensors.base</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>sensors.swing</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>sensors.xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>tests</artifactId>
		</dependency>
		<dependency>
			<groupId>org.commonreality</groupId>
			<artifactId>time</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Read license files into properties -->
			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>groovy-maven-plugin</artifactId>
				<version>2.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								def al2File = new
								File(project.properties.apache_license_20_file)
								project.properties.apache_license_20 = al2File.getText()
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Generate the bundles -->
			<plugin>
				<groupId>org.reficio</groupId>
				<artifactId>p2-maven-plugin</artifactId>
				<version>1.2.0-SNAPSHOT</version>
				<executions>
					<execution>
						<id>pack-third-party-libraries</id>
						<phase>package</phase>
						<goals>
							<goal>site</goal>
						</goals>
						<configuration>
							<pedantic>true</pedantic>
							<artifacts>
								<!-- Duplicates the dependencies from the dependenciesManagement 
									section of the parent POM -->
								<artifact>
									<id>junit:junit:4.12</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.hamcrest:hamcrest-all:1.3</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.jmock:jmock:2.8.1</id>
									<source>true</source>
									<instructions>
										<Require-Bundle>org.hamcrest.core;bundle-version="1.3.0",org.junit;bundle-version="4.12.0"</Require-Bundle>
										<Import-Package>bsh,org.objectweb.asm</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.jmock:jmock-junit4:2.8.1</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.jmock:jmock-testjar:2.8.1</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>nl.jqno.equalsverifier:equalsverifier:1.7.5</id>
									<source>true</source>
								</artifact>
								<!-- TODO: Update the list of artifacts -->
								<artifact>
									<id>org.javolution:javolution-core-java:${javolution.core.java.version}</id>
									<source>true</source>
									<!-- Override the existing Manifest to remove unavailable packages 
										that were originally imported -->
									<override>true</override>
									<instructions>
										<Bundle-Activator>javolution.osgi.internal.JavolutionActivator</Bundle-Activator>
										<Bundle-Description>Javolution - Java Solution for Real-Time
											and Embedded Systems. This project provides a Java library
											and a (mirror) C++ library. Both libraries are maven-based
											and can be used to build multi-platform real-time
											applications or to port Java applications to C++. The C++
											library contains already a port of OSGi and JUnit
											(demonstrated by the subproject test-cpp).</Bundle-Description>
										<Bundle-DocURL>http://javolution.org</Bundle-DocURL>
										<Bundle-License>http://javolution.org/LICENSE.txt</Bundle-License>
										<Bundle-ManifestVersion>2</Bundle-ManifestVersion>
										<Bundle-Name>Javolution Core (Java)</Bundle-Name>
										<Bundle-SymbolicName>org.javolution.core-java</Bundle-SymbolicName>
										<Bundle-Vendor>Javolution</Bundle-Vendor>
										<Bundle-Version>6.0.0</Bundle-Version>
										<!-- The use of sun.nio.ch was removed from javolution.io -->
										Export-Package:
										javolution.text;uses:="javolution.util.function,javolution.lang,javolution.util,javolution.xml,javolution.context";version="6.0.0",javolution.context;uses:="javolution.lang";version="6.0.0",javolution.xml.ws;uses:="javolution.xml.stream,javolution.xml,javolution.io,javolution.text";version="6.0.0",javolution.test;uses:="javolution.lang,javolution.util,javolution.text,javolution.context";version="6.0.0",javolution.io;uses:="javolution.text,javolution.lang,javolution.context";version="6.0.0",javolution.xml.sax;uses:="javolution.text,org.xml.sax,javolution.xml.stream";version="6.0.0",javolution.util;uses:="javolution.util.service,javolution.lang,javolution.util.function,javolution.text";version="6.0.0",javolution.xml.stream;uses:="javolution.text,javolution.lang";version="6.0.0",javolution.util.service;uses:="javolution.util.function";version="6.0.0",javolution.xml;uses:="javolution.util,javolution.util.function,javolution.text,javolution.lang,javolution.xml.stream,javolution.context,javolution.xml.sax";version="6.0.0",javolution.util.function;uses:="javolution.lang";version="6.0.0",javolution.lang;uses:="javolution.text,javolution.context";version="6.0.0",org.osgi.service.log;uses:="org.osgi.framework";version="1.3"
										<Export-Service>javolution.xml.stream.XMLInputFactory,javolution.xml.stream.XMLOutputFactory</Export-Service>
										<!-- The originally imported sun.nio.ch was removed -->
										<Import-Package>javolution.io,javolution.util.service,javolution.xml.stream,org.osgi.framework;version="[1.6,2)",org.osgi.service.log;version="[1.3,2)",org.osgi.util.tracker;version="[1.5,2)",org.xml.sax</Import-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.jscience:jscience:4.3.1</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<!-- TODO: Update to version 1.3.1 -->
									<id>commons-cli:commons-cli:1.2</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<!-- TODO: Update to org.apache.commons:commons-collections4:4.1 -->
									<id>commons-collections:commons-collections:3.2.1</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>commons-lang:commons-lang:${commons.lang.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>commons-primitives:commons-primitives:1.0</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<!-- TODO: Will be superseded by a feature defined below when p2-maven-plugin 
									supports feature definitions -->
								<artifact>
									<id>commons-logging:commons-logging:${commons.logging.version}</id>
									<source>true</source>
									<instructions>
										<!-- Ignoring non-satisfiable imports for org.apache.log, javax.servlet 
											and org.apache.avalon.framework.logger -->
										<Import-Package>org.apache.log4j</Import-Package>
										<!-- Ignoring uses-statements for org.apache.commons.logging.impl: 
											org.apache.log,org.apache.avalon.framework.logger,javax.servlet -->
										<Export-Package>org.apache.commons.logging;uses:="org.apache.commons.logging.impl",org.apache.commons.logging.impl;uses:="org.apache.commons.logging,org.apache.log4j"</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.mozilla:rhino:1.7.7</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>com.jcraft:jzlib:${jzlib.version}</id>
									<source>true</source>
									<instructions>
										<Import-Package>*</Import-Package>
										<Export-Package>*</Export-Package>
									</instructions>
								</artifact>
								<artifact>
									<id>org.slf4j:slf4j-api:${slf4j.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.slf4j:slf4j-nop:${slf4j.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.apache.mina:mina-core:${mina.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.apache.mina:mina-filter-compression:${mina.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.apache.mina:mina-statemachine:${mina.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.apache.mina:mina-transport-apr:${mina.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-buffer:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-codec:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-common:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-handler:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-resolver:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>io.netty:netty-transport:${netty.version}</id>
									<source>true</source>
									<!-- Is already a bundle, hence no instructions are specified. -->
								</artifact>
								<artifact>
									<id>org.commonreality:api:${newVersion}</id>
									<source>true</source>
									<singleton>true</singleton>
									<instructions>
										<Bundle-ManifestVersion>${bundle.manifest.version}</Bundle-ManifestVersion>
										<Bundle-Name>CommonReality API</Bundle-Name>
										<Bundle-SymbolicName>org.commonreality.api</Bundle-SymbolicName>
										<Bundle-Version>${newVersion}</Bundle-Version>
										<Bundle-Vendor>${bundle.vendor}</Bundle-Vendor>
										<Bundle-RequiredExecutionEnvironment>${bundle.required.execution.environment}</Bundle-RequiredExecutionEnvironment>
										<Export-Package>*</Export-Package>
										<Bundle-ActivationPolicy>lazy</Bundle-ActivationPolicy>
										<Bundle-ClassPath>.</Bundle-ClassPath>
									</instructions>
								</artifact>
								<artifact>
									<id>org.commonreality:core:${newVersion}</id>
									<source>true</source>
									<singleton>true</singleton>
									<instructions>
										<Bundle-ManifestVersion>${bundle.manifest.version}</Bundle-ManifestVersion>
										<Bundle-Name>CommonReality core implementation</Bundle-Name>
										<Bundle-SymbolicName>org.commonreality.core</Bundle-SymbolicName>
										<Bundle-Version>${newVersion}</Bundle-Version>
										<Bundle-Vendor>${bundle.vendor}</Bundle-Vendor>
										<Bundle-RequiredExecutionEnvironment>${bundle.required.execution.environment}</Bundle-RequiredExecutionEnvironment>
										<!-- Needs to be kept in sync with dependencies of core/ -->
										<Require-Bundle>org.commonreality.net;bundle-version="${newVersion}",org.commonreality.api;bundle-version="${newVersion}",org.commonreality.time;bundle-version="${newVersion}",org.commonreality.support;bundle-version="${newVersion}"</Require-Bundle>
										<Export-Package>*</Export-Package>
										<Eclipse-BuddyPolicy>registered</Eclipse-BuddyPolicy>
										<!-- TODO: List all required bundles as buddies? -->
										<!-- TODO: log4j is actually not listed as required ... -->
										<Eclipse-RegisterBuddy>org.apache.log4j</Eclipse-RegisterBuddy>
										<!-- TODO: Add a bundle activation policy? -->
										<Bundle-ClassPath>.</Bundle-ClassPath>
									</instructions>
								</artifact>
								<artifact>
									<id>org.commonreality:mina:${newVersion}</id>
									<source>true</source>
									<singleton>true</singleton>
									<instructions>
										<Bundle-ManifestVersion>${bundle.manifest.version}</Bundle-ManifestVersion>
										<Bundle-Name>CommonReality networking based on Apache Mina</Bundle-Name>
										<Bundle-SymbolicName>org.commonreality.mina</Bundle-SymbolicName>
										<Bundle-Version>${newVersion}</Bundle-Version>
										<Bundle-Vendor>${bundle.vendor}</Bundle-Vendor>
										<!-- Needs to be kept in sync with dependencies of mina/ -->
										<Require-Bundle>org.commonreality.net;bundle-version="${newVersion}",commons-logging;bundle-version="${commons.logging.version}",com.jcraft.jzlib;bundle-version="${jzlib.version}",slf4j.api;bundle-version="${slf4j.version}",slf4j.nop;bundle-version="${slf4j.version}",org.apache.mina.core;bundle-version="${mina.version}",org.apache.mina.filter.compression;bundle-version="${mina.version}",org.apache.mina.statemachine;bundle-version="${mina.version}",org.apache.mina.transport.apr;bundle-version="${mina.version}"</Require-Bundle>
										<Export-Package>org.commonreality.mina,org.commonreality.mina.protocol,org.commonreality.mina.service,org.commonreality.mina.transport</Export-Package>
										<Eclipse-BuddyPolicy>registered</Eclipse-BuddyPolicy>
										<!-- TODO: List all required bundles as buddies? -->
										<Eclipse-RegisterBuddy>org.commonreality.net</Eclipse-RegisterBuddy>
										<Bundle-ClassPath>.</Bundle-ClassPath>
									</instructions>
								</artifact>
<!-- 								modalities -->
<!-- 								modalities.spatial -->
<!-- 								net -->
<!-- 								netty -->
<!-- 								sensors -->
<!-- 								sensors.base -->
<!-- 								sensors.swing -->
<!-- 								sensors.xml -->
<!-- 								support -->
<!-- 								tests -->
<!-- 								time -->
							</artifacts>
							<!-- TODO: Ineffective until https://github.com/reficio/p2-maven-plugin/pull/75 
								gets merged -->
							<featureDefinitions>
								<feature>
									<id>commons-logging.feature</id>
									<version>${commons.logging.version}</version>
									<label>Commons Logging</label>
									<providerName>Apache Software Foundation</providerName>
									<!-- Description taken from http://commons.apache.org/proper/commons-logging/index.html -->
									<description>The Logging package is an ultra-thin bridge
										between different logging implementations. A library that uses
										the commons-logging API can be used with any logging
										implementation at runtime. Commons-logging comes with support
										for a number of popular logging implementations, and writing
										adapters for others is a reasonably simple task.</description>
									<!-- Copyright taken from commons-logging-1.1.1.jar:/META-INF/NOTICE -->
									<copyright>Commons Logging
										Copyright 2001-2007 The Apache
										Software Foundation

										This product includes/uses software(s)
										developed by 'an unknown
										organization'
										- Unnamed -
										avalon-framework:avalon-framework:jar:4.1.3
										- Unnamed -
										log4j:log4j:jar:1.2.12
										- Unnamed - logkit:logkit:jar:1.0.1</copyright>
									<license>${apache_license_20}</license>
									<generateSourceFeature>true</generateSourceFeature>
									<artifacts>
										<artifact>
											<id>commons-logging:commons-logging:${commons.logging.version}</id>
											<source>true</source>
											<instructions>
												<!-- Ignoring non-satisfiable imports for org.apache.log, javax.servlet 
													and org.apache.avalon.framework.logger -->
												<Import-Package>org.apache.log4j</Import-Package>
												<!-- Ignoring uses-statements for org.apache.commons.logging.impl: 
													org.apache.log,org.apache.avalon.framework.logger,javax.servlet -->
												<Export-Package>org.apache.commons.logging;uses:="org.apache.commons.logging.impl",org.apache.commons.logging.impl;uses:="org.apache.commons.logging,org.apache.log4j"</Export-Package>
											</instructions>
										</artifact>
									</artifacts>
								</feature>
								<!-- TODO: Add feature definitions for org.commonreality.core and 
									org.commonreality.support (req: required, in: included) api - req:core core 
									- in+req:core mina - req:core modalities - in:core modalities.spatial net 
									- in+req:core netty sensors sensors.base sensors.swing sensors.xml support 
									- req:core, in:support tests time - req:core -->
							</featureDefinitions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Upload the P2 repository -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<id>upload-P2</id>
						<phase>deploy</phase>
						<goals>
							<goal>upload</goal>
						</goals>
						<configuration>
							<fromDir>${project.build.directory}/repository</fromDir>
							<includes>*/**</includes>
							<serverId>${commonreality.ftp.server}</serverId>
							<url>${commonreality.p2repo.upload.url}</url>
							<!-- <toDir></toDir> -->
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<extensions>
			<!-- Enabling the use of SFTP -->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh</artifactId>
				<version>2.9</version>
			</extension>
		</extensions>
	</build>

</project>
